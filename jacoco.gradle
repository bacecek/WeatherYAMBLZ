task jacocoTestReport(type: JacocoReport, overwrite: true) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    // Exclude Dagger 2 and other generated code
    def fileFilter = [
            '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
            '**/*_ViewBinding*.*',
            '**/*$Lambda$*.*',
            '**/*Module.*', '**/*Dagger*.*',
            '**/*MembersInjector*.*', '**/*_Provide*Factory*.*', '**/*_Factory.*',
            '**/di/*',
            '**/*$PresentersBinder$*.class', '**/*$PresentersBinder.class',
            '**/*$ViewStateProvider.class', '**/*$State$*.class', '**/*$State.class',
            '**/*StethoHelper*.*',
            '**/*Unit*.*',
            '**/*Dao*.*', '**/*AppDatabase*.*',
            '**/entity/**', '**/response/**',
            'com/arellomobile/mvp/**',
            '**/*Adapter*.*', '**/*DiffCallBack*.*', '**/*ItemDecoration*.*',
            '**/network/util/**'
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files([
            "${buildDir}/jacoco/testDebugUnitTest.exec",
            fileTree(dir: "${buildDir}/outputs/code-coverage/connected/").matching {
                include '*.ec'
            }
    ])

    // Always regenerate report
    outputs.upToDateWhen { false }
}